// WARNING: THIS FILE IS AUTOGENERATED! As such, it should not be edited.
// Edits need to be made to the proto files
// (see https://github.com/mavlink/MAVSDK-Proto/blob/master/protos/radio_calibration/radio_calibration.proto)

#include <iomanip>

#include "radio_calibration_impl.h"
#include "plugins/radio_calibration/radio_calibration.h"

namespace mavsdk {


using ProgressData = RadioCalibration::ProgressData;


RadioCalibration::RadioCalibration(System& system) : PluginBase(), _impl{new RadioCalibrationImpl(system)} {}

RadioCalibration::RadioCalibration(std::shared_ptr<System> system) : PluginBase(), _impl{new RadioCalibrationImpl(system)} {}

RadioCalibration::~RadioCalibration() {}



void RadioCalibration::calibrate_radio_async(CalibrateRadioCallback callback)
{
    _impl->calibrate_radio_async(callback);
}







void RadioCalibration::cancel() const
{
    _impl->cancel();
}




std::ostream& operator<<(std::ostream& str, RadioCalibration::Result const& result)
{
    switch (result) {
        case RadioCalibration::Result::Unknown:
            return str << "Unknown";
        case RadioCalibration::Result::Success:
            return str << "Success";
        case RadioCalibration::Result::Next:
            return str << "Next";
        case RadioCalibration::Result::Failed:
            return str << "Failed";
        case RadioCalibration::Result::NoSystem:
            return str << "No System";
        case RadioCalibration::Result::ConnectionError:
            return str << "Connection Error";
        case RadioCalibration::Result::Busy:
            return str << "Busy";
        case RadioCalibration::Result::CommandDenied:
            return str << "Command Denied";
        case RadioCalibration::Result::Timeout:
            return str << "Timeout";
        case RadioCalibration::Result::Cancelled:
            return str << "Cancelled";
        case RadioCalibration::Result::FailedArmed:
            return str << "Failed Armed";
        default:
            return str << "Unknown";
    }
}


bool operator==(const RadioCalibration::ProgressData& lhs, const RadioCalibration::ProgressData& rhs)
{
    return
        (rhs.has_progress == lhs.has_progress) &&
        ((std::isnan(rhs.progress) && std::isnan(lhs.progress)) || rhs.progress == lhs.progress) &&
        (rhs.has_status_text == lhs.has_status_text) &&
        (rhs.status_text == lhs.status_text);
}

std::ostream& operator<<(std::ostream& str, RadioCalibration::ProgressData const& progress_data)
{
    str << std::setprecision(15);
    str << "progress_data:" << '\n'
        << "{\n";
    str << "    has_progress: " << progress_data.has_progress << '\n';
    str << "    progress: " << progress_data.progress << '\n';
    str << "    has_status_text: " << progress_data.has_status_text << '\n';
    str << "    status_text: " << progress_data.status_text << '\n';
    str << '}';
    return str;
}




} // namespace mavsdk